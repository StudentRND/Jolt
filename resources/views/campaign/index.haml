- extends "template.haml"
- block section "campaign index"
- block content
  %h2 #{campaign.name}
  .mine
    %p
      Here's how this works: create tracking links to promote our cause and earn points for each unique click on your
      link. See your overall standing below.
    .sharer
      .tabs
        %ul.headings
          %li.tab-social.active> Post to Social Media
          %li.tab-email> Send an Email
          %li.tab-custom> Post Somewhere Else
        .content
          .tab-social.active
            %ul
              %li
                %a(href="/c/#{campaign.id}/share/facebook" class="facebook" target="_blank") Share on Facebook
              %li
                %a(href="/c/#{campaign.id}/share/twitter" class="twitter" target="_blank") Share on Twitter
              %li
                %a(href="/c/#{campaign.id}/share/linkedin" class="linkedin" target="_blank") Share on LinkedIn
          .tab-email
            %a(href="/c/#{campaign.id}/share/email" target="_blank") Send an Email
          .tab-custom
            %form(action="#" id="share-custom")
              %input(type="text" name="description" placeholder="Where will you post this? (For your own reference, e.g. Meetup.)" maxlength="40" required)
              %input(type="submit" value="Create link")
            .all-links
              %table
                %tbody
                  -for link in me.links().where('campaign_id', '=', campaign.id).where('type', '=', 'custom').orderBy('created_at', 'DESC').get()
                    %tr
                      %td #{link.description}
                      %td
                        %input(type="text" value="#{link.url}" readonly)

    -if me.links|length > 0
      -if me.clicks().where('campaign_id', '=', "#{campaign.id}").count() > 10
        .graphs
          %h4 How Your Early Promotion Paid-Off
          #timeline
      %h3 All Your Links
      %table.links
        %thead
          %tr
            %th Description
            %th Link
            %th Clicks
        %tbody
          -for link in me.links().where('campaign_id', '=', campaign.id).get()
            %tr
              %td
                %span(class="#{link.type}")
                -if link.description
                  #{link.description}
                -else
                  Sent on #{link.created_at.format('F j, Y')}
              %td
                %input(type="text" value="#{link.url}" readonly)
              %td #{link.clicks().count()}
  .global
    -if campaign.ends_at.isFuture
      %h3#countdown
      %p Time Left
    %h3 Leaderboard
    .leaderboard
      %ol#leaderboard
    %h3 Updates
    .updates
      %ul#updates
      -if me.IsAdminFor(campaign)
        %form(action="#" id="post-update")
          %input(type="text" name="text" value="" placeholder="Send a new message" autocomplete="off")
          %input(type="submit" value="Send")
    -if me.IsAdminFor(campaign)
      %h3 Admin Functions
      %form(action="#" id="opdeop")
        %input(type="text" name="username" placeholder="Username")
        %input(type="submit" value="Op/Deop")
      %p
        %a(href="/c/#{campaign.id}/edit") Edit Settings

  -if campaign.foreground_color
    :css
      body, body a {
        color: #{campaign.foreground_color};
      }
  -if campaign.background_color
    :css
      header nav a {
        color: #{campaign.background_color};
      }
      body {
        background-color: #{campaign.background_color};
      }

  -if campaign.accent_color
    :css
      input[type="submit"] {
        background-color: #{campaign.accent_color} !important;
        border-color: #{campaign.accent_color} !important;
        color: #fff !important;
      }
      input[type="text"] {
        border: 1px solid #{campaign.accent_color} !important;
      }
      header {
        background-color: #{campaign.accent_color};
        padding: 0 1rem 1rem;
      }
      header nav {
        padding-top: 0.75rem;
      }
      #timeline {
        background-color: #{campaign.accent_color};
      }
      .tabs ul.headings li {
        border-color: #{campaign.accent_color};
        border-bottom-width: 0;
        color: #{campaign.accent_color};
      }
      .tabs ul.headings li.active {
        background-color: #{campaign.accent_color};
      }
      .tabs .content > div {
        border-color: #{campaign.accent_color};
      }
      input[type="text"] {
        background-color: transparent;
        color: #{campaign.foreground_color};
      }
  -if campaign.font
    :css
      p, a, li, blockquote, div, span, h1, h2, h3, h4, h5, h6, input {
        font-family: 'SegoeUILight', 'Alef', Tahoma, Verdana, Arial !important;
      }
-block scripts
  :javascript
    // API Library
    var api = {
      // Request Helpers
      _base: '/c/#{campaign.id}',
      _csrfToken: '#{csrf_token()}',
      _makeUrl: function(endpoint) { return this._base+'/'+endpoint; },
      get: function(endpoint, callback) { return $.getJSON(this._makeUrl(endpoint), callback);},
      post: function(endpoint, data, callback) {
        data._token = this._csrfToken;
        return $.post(this._makeUrl(endpoint), data, function(x){callback($.parseJSON(x))});
      },

      // Event Bindings
      _onUpdateCallbacks: [],
      onUpdate: function(callback) { this._onUpdateCallbacks.push(callback); },
      updateNow: function(){
          var _this = api;
          _this.get('state.json', function(data) {
            $.each(_this._onUpdateCallbacks, function(i, callback) { callback(data); });
          });
      },
      runUpdates: function() {
        setInterval(this.updateNow, 5000);
        this.updateNow();
      }
    };
    api.runUpdates();

    // Update the site if information has changed
    var currentVersion = #{campaign.updated_at.timestamp};
    api.onUpdate(function(data) {
      if (data.version !== currentVersion) location.reload();
    });

    // Update the leaderboard
    api.onUpdate(function(data) {
      var leaderboardElem = $('<ol id="leaderboard"></ol>');
      $.each(data.leaderboard, function(i, leader) {
        var leaderElem = $('<li><a class="email"><span class="username"></span></a><span class="clicks"></span></li>');
        leaderElem.find('.username').text(leader.username);
        leaderElem.find('.clicks').text(leader.clicks);
        if (leader.email)
          leaderElem.find('.email').attr('href', 'mailto:'+leader.email);
        leaderboardElem.append(leaderElem);
      });
      $('#leaderboard').replaceWith(leaderboardElem);
    });

    // Update the messages
    api.onUpdate(function(data) {
      var updatesElem = $('<ul id="updates"></ul>');
      $.each(data.updates, function(i, update) {
        var updateElem = $('<li><span class="text"></span><span class="author"></span></li>');
        updateElem.find('.text').text(update.text);
        updateElem.find('.author').text(update.author);
        updatesElem.append(updateElem);
      });
      $('#updates').replaceWith(updatesElem);
    });

    // Forms
    $('form#share-custom').on('submit', function(e) { e.stopPropagation();
      var description = $(this).find('input[name="description"]').val();
      api.post('share/custom', {description: description}, function(data) {
        var newRow = $('<tr><td></td><td><input readonly></td></tr>');
        newRow.find('td').first().text(data.description);
        newRow.find('td input').val(data.url);

        $('.tab-custom table tbody').prepend(newRow);
      });
      return false;
    });

    $('form#opdeop').on('submit', function(e) { e.stopPropagation();
      var input = $('form#opdeop input[name="username"]');
      api.post('op/'+input.val(), {}, function(data) {
        alert(data.is_admin);
        input.val('');
      });
      return false;
    });

  -if campaign.ends_at.isFuture
    :javascript
      var endsAt = Date.parse('#{campaign.ends_at.timestamp|date('c')|escape('js')}');
      setInterval(function(){
        var delta = (endsAt - (new Date()))/1000;
        var days = Math.floor(delta / 86400);
        delta -= days * 86400;

        var hours = Math.floor(delta / 3600) % 24;
        delta -= hours * 3600;

        var minutes = Math.floor(delta / 60) % 60;
        delta -= minutes * 60;

        var seconds = Math.floor(delta % 60);
        delta -= seconds;

        var millis = (delta).toFixed(2);
        $("#countdown").text(days+':'+hours.toString().padStart(2, '0')+':'+minutes.toString().padStart(2, '0')+':'+seconds.toString().padStart(2, '0')+'.'+millis.toString().substring(2));
      }, 50);


  -if me.links|length > 0
    %script(src="//d3js.org/d3.v4.min.js")
    :javascript
      (function(){
        var width = $('#timeline').width(),
            height = width*0.3,
            padding = 20;

        var parseDate = d3.timeParse("%Y-%m-%d");
        var svg = d3.select("#timeline").append("svg")
          .attr("width", width)
          .attr("height", height);
        var scale = d3.scaleTime()
          .range([padding, width-padding]).nice();
        var xAxis = d3.axisBottom()
          .scale(scale)
          .tickValues(scale.ticks(5).concat(scale.domain()))
          .tickFormat(d3.timeFormat('%-m/%-d'));
        
        svg.append('g')
          .attr('class', 'x axis')
          .call(xAxis)
          .attr('transform', 'translate(0,'+(height-padding)+')');


        var updateChart = function(){
          d3.csv("/c/#{campaign.id}/timeline.csv", function(data){
            scale.domain([parseDate(data[0].created_at), d3.max(data, function(d){ return parseDate(d.clicked_at); })]);
            var domainDays = (scale.domain()[1] - scale.domain()[0])/(1000*60*60*24);
            xAxis
              .scale(scale)
              .tickValues(scale.ticks(Math.min(domainDays, 5)).concat(scale.domain()));
            svg.select('.x.axis').call(xAxis);

            var linkArc = function(d) {
              var sx = scale(parseDate(d.created_at));
              var tx = scale(parseDate(d.clicked_at));


              if (tx-sx < Number.EPSILON) tx += width/50;
              if (tx-(width-padding) > 0) { sx -= width/50; tx -= width/50; }
              

              var dx = tx - sx,
                  dr = Math.sqrt(dx * dx)/(1.25+(.75/Math.pow(dx, 0.1)));
              return "M"+sx+",0"+ "A"+dr+","+dr+" 0 0,1 "+tx+",0";
            }


            svg.selectAll('.click-arc')
              .data(data)
              .enter().append('svg:path')
                .attr("d", linkArc)
                .style("stroke-width", function(d){ return Math.pow(d.count, 0.75); })
                .style("opacity", function(d){ return 1/Math.pow(d.count, 0.25); })
                .attr('class', 'click-arc')
                .attr('transform', 'translate(0,'+(height-padding)+')')
          });
        };
        updateChart();
        setInterval(updateChart, 5000);
      })();
  -if me.IsAdminFor(campaign)
    :javascript
      $('#post-update').on('submit', function(e) { e.stopPropagation();
        var text = $(this).find('input[name="text"]');
        api.post('update', {text: text.val()}, function(data) {api.updateNow();});
        text.val('');
        return false;
      });
